import fs from "fs";
import path from "path";
import prettier from "prettier";
import { collectionDocumentTypes, CollectionsConfig } from "./config";

// import { createCollectionMethods } from "./methods";

// /**
//  * @TODO This file would have to be generated based on the definitions file.
//  * Simply iterating over the definitions can not give us strict typing.
//    */
// export function createFacade(db: FirebaseFirestore.Firestore) { return {
//   athletes: { ...createCollectionMethods<typeof def.root.athletes>(db,
//   "athletes"), sub: (parentDocumentId: string) => ({ medals:
//   createCollectionMethods<typeof def.sub.athletes.medals>( db,
//   `athletes/${parentDocumentId}/medals`,
//         ),
//       }),
//     },
//     events: createCollectionMethods<typeof def.root.events>(db, "events"),
//   };
// }

export async function generate(config: CollectionsConfig) {
  const code = `
    /**
     * This file was generated by the Firestore Facade CLI package and is not
     * meant not be edited manually. If you change anything about your database
     * document types, simply re-execute the code generator to update this file.
     */

    import { collectionDocumentTypes as def } from "./config";
    import { createCollectionMethods } from "./methods";

    export function createFacade(db: FirebaseFirestore.Firestore) {
      return {
        ${genCollections(config)}
      }
    }
  `;

  const outputFilePath = path.resolve(__dirname, "../src", "facade.ts");

  await fs.promises.writeFile(
    outputFilePath,
    prettier.format(code, { parser: "typescript" }),
  );

  console.log("Facade code generated at:", outputFilePath);
}

function genCollections(config: CollectionsConfig) {
  const rootCollectionNames = Object.keys(config.root);

  let code = "";

  for (const collectionName of rootCollectionNames) {
    console.log(`Generating code for root collection ${collectionName}`);

    const subConfig = config.sub[collectionName];

    if (subConfig) {
      const subCollectionNames = Object.keys(subConfig);

      code = `${code}
      ${collectionName}: {
        ...createCollectionMethods<typeof def.root.${collectionName}>(db, "${collectionName}"),
        sub: (parentDocumentId: string) => ({
          ${genSubCollections(collectionName, subCollectionNames)}
        }),
      },`;
    } else {
      code = `${code}
      ${collectionName}: createCollectionMethods<typeof def.root.${collectionName}>(db, "${collectionName}"),
    `;
    }
  }

  return code;
}

function genSubCollections(
  rootCollectionName: string,
  subCollectionNames: string[],
) {
  let code = "";

  for (const collectionName of subCollectionNames) {
    code = `${code}
      ${collectionName}: createCollectionMethods<typeof def.sub.${rootCollectionName}.${collectionName}>(
        db,
        \`${rootCollectionName}/\${parentDocumentId}/${collectionName}\`
      ),
    `;
  }

  return code;
}

(async () => {
  generate(collectionDocumentTypes);
})();
